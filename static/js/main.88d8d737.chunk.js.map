{"version":3,"sources":["components/Header/index.js","components/Me/index.js","components/Image/index.js","components/Projects/index.js","components/Projects/parseUri.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","menuItem","color","palette","primary","dark","title","MenuAppBar","classes","anchorEl","setAnchorEl","React","useState","handleClose","_jsx","AppBar","position","className","children","_jsxs","Toolbar","Typography","variant","IconButton","edge","onClick","event","currentTarget","MenuIcon","Menu","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","MenuItem","href","style","textDecoration","display","justifyContent","aspectRatio","imageContainer","height","image","objectFit","margin","imageButtonContainer","bottom","right","icons","PROFILE_IMAGE","gql","_templateObject","_taggedTemplateLiteral","PROFILE_DATA","gitHubUrl","linkedInUrl","whoAmI","Me","props","loading","error","data","useQuery","console","log","repositoryOwner","profileImageUrl","src","alt","GitHubIcon","LinkedInIcon","float","textAlign","fontSize","Image","loaded","setLoaded","setError","backgroundColor","width","_Fragment","onLoad","onError","flexWrap","overflow","gridList","transform","gridListTileRoot","gridListTileTile","gridListTileImgFullWidth","gridListTileImgFullHeight","light","titleBar","background","PINNED_REPOSITORIES","ConditionalWrapper","_ref","condition","wrapper","Projects","user","pinnedItems","nodes","newData","tiles","map","tile","datum","img","str","keys","m","exec","q","i","length","parseUri","authority","concat","GridList","cellHeight","cols","index","GridListTile","imgFullWidth","imgFullHeight","rows","deployedUrl","GridListTileBar","actionIcon","githubUrl","token","process","REACT_APP_TOKEN","GITHUB_TOKEN","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","cache","InMemoryCache","createMuiTheme","main","secondary","typography","fontFamily","join","body1","section","padding","sectionHeader","marginTop","marginBottom","sectionBody","marginLeft","App","ApolloProvider","MuiThemeProvider","CssBaseline","Header","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uXAkBA,MAAMA,EAAYC,aAAYC,IAAK,CACjCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,SAAU,CACRC,MAAOP,EAAMQ,QAAQC,QAAQC,MAE/BC,MAAO,CACLT,SAAU,OAIC,SAASU,IACtB,MAAMC,EAAUf,KACTgB,EAAUC,GAAeC,IAAMC,SAAS,MAMzCC,EAAcA,KAClBH,EAAY,KAAK,EAGnB,OACII,cAACC,IAAM,CAACC,SAAS,SAASC,UAAWT,EAAQZ,KAAKsB,SAChDC,eAACC,IAAO,CAAAF,SAAA,CACNJ,cAACO,IAAU,CAACC,QAAQ,KAAKL,UAAWT,EAAQF,MAAMY,SAAC,iBAGnDJ,cAACS,IAAU,CAACC,KAAK,QAAQP,UAAWT,EAAQV,WAAYI,MAAM,UAAU,aAAW,OAAOuB,QAd9EC,IAClBhB,EAAYgB,EAAMC,cAAc,EAaoFT,SAC5GJ,cAACc,IAAQ,MAEXT,eAACU,IAAI,CACHC,GAAG,cACHrB,SAAUA,EACVsB,aAAc,CACZC,SAAU,MACVC,WAAY,SAEdC,aAAW,EACXC,gBAAiB,CACfH,SAAU,MACVC,WAAY,SAEdG,KAAMC,QAAQ5B,GACd6B,QAASzB,EAAYK,SAAA,CAErBJ,cAACyB,IAAQ,CAACd,QAASZ,EAAaI,UAAWT,EAAQP,SAASiB,SAACJ,cAAA,KAAG0B,KAAK,YAAYC,MAAO,CAAEvC,MAAO,UAAWwC,eAAgB,WAAYxB,SAAC,eACzIJ,cAACyB,IAAQ,CAACd,QAASZ,EAAaI,UAAWT,EAAQP,SAASiB,SAACJ,cAAA,KAAG0B,KAAK,MAAMC,MAAO,CAAEvC,MAAO,UAAWwC,eAAgB,WAAYxB,SAAC,qBAK/I,C,kEClEA,MAAMzB,EAAYC,aAAYC,IAAK,CAC/BC,KAAM,CACF+C,QAAS,OACTC,eAAgB,SAChBC,YAAa,SAEjBC,eAAgB,CACZH,QAAS,OACT3B,SAAU,WACV4B,eAAgB,QAChBG,OAAQ,SAEZC,MAAO,CACHL,QAAS,eACTM,UAAW,QACXJ,YAAa,OACbK,OAAQ,UAEZC,qBAAsB,CAClBR,QAAS,OACTC,eAAgB,WAChB5B,SAAU,WACVoC,OAAQ,EACRC,MAAO,OACPnD,MAAO,QAEXoD,MAAO,CACHpD,MAAOP,EAAMQ,QAAQC,QAAQC,UAK/BkD,EAAgBC,YAAGC,MAAAC,YAAA,uGASnBC,EAAe,CACjBC,UAAW,kCACXC,YAAa,qDACbC,OAAQ,qMAGG,SAASC,EAAGC,GACvB,MAAMxD,EAAUf,KAEV,QAAEwE,EAAO,MAAEC,EAAK,KAAEC,GAASC,YAASb,GAC1C,GAAIU,EACA,OAAOnD,cAAA,KAAAI,SAAG,YAEd,GAAIgD,EAEA,OADAG,QAAQC,IAAIJ,GACLpD,cAAA,KAAAI,SAAG,UAEd,IAAKiD,EACD,OAAOrD,cAAA,KAAAI,SAAG,eAGd,IAAMqD,iBAAmBC,gBAAiBxB,IAAYmB,EAEtD,OACIhD,eAAA,OAAKF,UAAWT,EAAQZ,KAAKsB,SAAA,CACzBC,eAAA,OAAKF,UAAWT,EAAQsC,eAAe5B,SAAA,CACnCJ,cAAA,OAAK2D,IAAKzB,EAAO/B,UAAWT,EAAQwC,MAAO0B,IAAI,cAC/CvD,eAAA,OAAKF,UAAWT,EAAQ2C,qBAAqBjC,SAAA,CACzCJ,cAACS,IAAU,CAAC,sBAAqBL,SAC7BJ,cAAA,KAAG0B,KAAMmB,EAAaC,UAAU1C,SAACJ,cAAC6D,IAAU,CAAC1D,UAAWT,EAAQ8C,YAEpExC,cAACS,IAAU,CAAC,sBAAqBL,SAC7BJ,cAAA,KAAG0B,KAAMmB,EAAaE,YAAY3C,SAACJ,cAAC8D,IAAY,CAAC3D,UAAWT,EAAQ8C,kBAIhFxC,cAAA,KAAG2B,MAAO,CAAEoC,MAAO,QAASC,UAAW,OAAQC,SAAU,OAAQ7E,MAAO,QAASgB,SAAEyC,EAAaG,WAG5G,C,0CClFe,SAASkB,EAAOhB,GAC3B,MAAQiB,EAAQC,GAActE,oBAAS,IAC/BsD,EAAOiB,GAAavE,oBAAS,GA0BrC,OAAQqE,EAEJnE,cAAA,OAAK4D,IAAKV,EAAMU,KAAO,MAAQV,IAD7BE,EAA6GpD,cAAA,OAAK2B,MAdvG,CACb2C,gBAAiB,QACjBlF,MAAO,QACP+C,UAAW,QACXoC,MAAO,OACPtC,OAAQ,UASG5B,eAAAmE,WAAA,CAAApE,SAAA,CAAEJ,cAAA,OAAK2D,IAAKT,EAAMS,IAAKc,OArBtC,WACIL,GAAU,EACd,EAmBsDM,QAlBtD,WACIL,GAAS,EACb,EAgBwET,IAAK,aAAa5D,cAAA,OAAAI,SAAK,cAEnG,CCjBA,MAAMzB,EAAYC,aAAYC,IAAK,CACjCC,KAAM,CACJ+C,QAAS,OACT8C,SAAU,OACV7C,eAAgB,SAChB8C,SAAU,UAEZC,SAAU,CACRN,MAAO,KAGPO,UAAW,iBAEbC,iBAAkB,CACdhD,YAAa,SAEjBiD,iBAAkB,CAChBjD,YAAa,SAGfkD,yBAA0B,CACtBV,MAAO,OACPxC,YAAa,SAEjBmD,0BAA2B,CACzBjD,OAAQ,OACRF,YAAa,SAEfvC,MAAO,CACLJ,MAAOP,EAAMQ,QAAQC,QAAQ6F,OAE/BC,SAAU,CACRC,WACE,4FAwBAC,EAAsB5C,YAAGC,MAAAC,YAAA,iWA4BzB2C,EAAqBC,IAAuC,IAAtC,UAAEC,EAAS,QAAEC,EAAO,SAAEtF,GAAUoF,EAC1D,OAAOC,EAAYC,EAAQtF,GAAYJ,cAAAwE,WAAA,CAAApE,SAAGA,GAAY,EAOzC,SAASuF,EAASzC,GAC/B,MAAMxD,EAAUf,IAChB,IAAI,QAAEwE,EAAO,MAAEC,EAAK,KAAEC,GAASC,YAASgC,GAExC,GAAInC,EACF,OAAOnD,cAAA,KAAAI,SAAG,YAEZ,GAAIgD,EAEF,OADAG,QAAQC,IAAIJ,GACLpD,cAAA,KAAAI,SAAG,UAEZ,IAAKiD,EACH,OAAOrD,cAAA,KAAAI,SAAG,eAEZ,CACE,IAAMwF,MAAQC,aAAeC,MAAOC,KAAgB1C,EACpDA,EAAO0C,CACT,CAEA,IAAIC,EAAQ3C,EAAK4C,KAAI,SAAUC,GAC7B,IAAIC,EAAQ,IAAKD,GAIjB,OAHKA,EAAKE,KAAwC,kCC3HvC,SAAkBC,GAC7B,IAAIC,EAAO,CAAE,GAAI,GAAI,SAAU,GAAI,YAAa,OAAQ,GAAI,QAAS,GAAI,YACrEC,EAAK,8DAA8DC,KAAKH,GACxEI,EAAI,CAAC,EACT,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKK,SAAUD,EAC3BJ,EAAKI,IAAMH,EAAEG,KACbD,EAAEH,EAAKI,IAAKH,EAAEG,IAGtB,OAAOD,CACX,CDiHqBG,CAASV,EAAKE,KAAKS,YAClCV,EAAMC,IAAG,gEAAAU,OAAmEZ,EAAK1G,QAE5E2G,CACT,IAEA,OACEnG,cAAA,OAAKG,UAAWT,EAAQZ,KAAKsB,SAE3BJ,cAAC+G,IAAQ,CAAC5G,UAAWT,EAAQmF,SAAUmC,WAAW,OAAOC,KAAM,EAAG/H,QAAS,EAAEkB,SAC1E4F,EAAMC,KAAI,CAACC,EAAMgB,IAChB7G,eAAC8G,IAAY,CAACzH,QAAS,CACrBZ,KAAMY,EAAQqF,iBACdmB,KAAMxG,EAAQsF,iBACdoC,aAAc1H,EAAQuF,yBACtBoC,cAAe3H,EAAQwF,2BACV+B,KAAgB,IAAVC,EAAc,EAAI,EAAGI,KAAgB,IAAVJ,EAAc,EAAI,EAAE9G,SAAA,CAClEJ,cAACuF,EAAkB,CACjBE,UAAWS,EAAKqB,YAChB7B,QAAUtF,GAAaJ,cAAA,KAAG0B,KAAMwE,EAAKqB,YAAYnH,SAAEA,IAAcA,SAEjEJ,cAACkE,EAAK,CAACvC,MAAO,CAAE4C,MAAO,OAAQxC,YAAa,SAAW4B,IAAKuC,EAAKE,IAAKxC,IAAKsC,EAAK1G,UAGlFQ,cAACwH,IAAe,CACdhI,MAAO0G,EAAK1G,MACZE,QAAS,CACPZ,KAAMY,EAAQ0F,SACd5F,MAAOE,EAAQF,OAEjBiI,WAAYvB,EAAKwB,UACf1H,cAACS,IAAU,CAAC,qBAAAqG,OAAoBZ,EAAK1G,OAAQY,SAC3CJ,cAAA,KAAG0B,KAAMwE,EAAKwB,UAAUtH,SAACJ,cAAC6D,IAAU,CAAC1D,UAAWT,EAAQF,YAC1CQ,cAAAwE,WAAA,QAjBd0C,QAyBlB,C,OEjKA,MAAMS,EAAQC,mIAAYC,iBAAmBD,mIAAYE,cAAgB,GACnEC,EAAWC,YAAe,CAC9BC,IAAK,mCAEDC,EAAWC,aAAW,CAACC,EAAC5C,KAAmB,IAAjB,QAAE6C,GAAS7C,EAIzC,MAAO,CACL6C,QAAS,IACJA,EACHC,cAAeX,EAAK,UAAAb,OAAaa,GAAU,IAE9C,IAGGY,EAAS,IAAIC,IAAa,CAC9BC,KAAMP,EAASpB,OAAOiB,GACtBW,MAAO,IAAIC,MAMb,IAAI9J,EAAQ+J,YAAe,CACzBvJ,QAAS,CACPC,QAAS,CACPuJ,KAAM,WAERC,UAAW,CACTD,KAAM,YAWVE,WAAY,CACVC,WAAY,CAAC,qBAAsB,WAAWC,KAAK,QAKvDpK,EAAMkK,WAAWG,MAAQ,CACvBjF,SAAU,QAUZ,IAAItC,GAAQ,CACVwH,QAAS,CACPC,QAAS,YAEXC,cAAe,CACbC,UAAW,EACXC,aAAc,EACdvF,UAAW,QAEbwF,YAAa,CACXC,WAAY,KAkCDC,OA9Bf,WACE,OACE1J,cAAC2J,IAAc,CAACpB,OAAQA,EAAOnI,SAC7BC,eAACuJ,IAAgB,CAAC/K,MAAOA,EAAMuB,SAAA,CAC7BJ,cAAC6J,IAAW,IACZxJ,eAAA,OAAKF,UAAU,MAAKC,SAAA,CAClBJ,cAAC8J,EAAM,CAAC1K,MAAM,YACdiB,eAAA,OAAKsB,MAAOA,GAAMwH,QAAQ/I,SAAA,CACxBJ,cAAA,OAAKgB,GAAG,WAAWW,MAAOA,GAAM0H,cAAcjJ,SAC5CJ,cAACO,IAAU,CAACC,QAAQ,QAAOJ,SAAC,eAI9BJ,cAAC2F,EAAQ,CAAChE,MAAOA,GAAM6H,iBAEzBnJ,eAAA,OAAKsB,MAAOA,GAAMwH,QAAQ/I,SAAA,CACxBJ,cAAA,OAAKgB,GAAG,KAAKW,MAAOA,GAAM0H,cAAcjJ,SACtCJ,cAACO,IAAU,CAACC,QAAQ,QAAOJ,SAAC,eAI9BJ,cAACiD,EAAE,CAACtB,MAAOA,GAAM6H,wBAO7B,ECvGeO,OAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK1E,IAAkD,IAAjD,OAAE2E,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAS/E,EACpE2E,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EAAY,GAExB,ECHFQ,IAASC,OACPzK,cAACH,IAAM6K,WAAU,CAAAtK,SACfJ,cAAC0J,GAAG,MAENiB,SAASC,eAAe,SAM1Bb,I","file":"static/js/main.88d8d737.chunk.js","sourcesContent":["/**\n * NOTE: https://material-ui.com/components/app-bar/#app-bar\n */\n\nimport React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  menuItem: {\n    color: theme.palette.primary.dark\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function MenuAppBar() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n      <AppBar position=\"sticky\" className={classes.root}>\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Manuel Nunes\n          </Typography>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={handleMenu}>\n            <MenuIcon />\n          </IconButton>\n          <Menu\n            id=\"menu-appbar\"\n            anchorEl={anchorEl}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n            keepMounted\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n            open={Boolean(anchorEl)}\n            onClose={handleClose}\n          >\n            <MenuItem onClick={handleClose} className={classes.menuItem}><a href=\"#projects\" style={{ color: \"inherit\", textDecoration: \"initial\" }}>Projects</a></MenuItem>\n            <MenuItem onClick={handleClose} className={classes.menuItem}><a href=\"#me\" style={{ color: \"inherit\", textDecoration: \"initial\" }}>Contact</a></MenuItem>\n          </Menu>\n        </Toolbar>\n      </AppBar>\n  );\n}\n","import React from 'react';\nimport { useQuery, gql } from '@apollo/client';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\n//import StarBorderIcon from '@material-ui/icons/StarBorder';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        aspectRatio: '2 / 1',\n    },\n    imageContainer: {\n        display: 'flex',\n        position: 'relative',\n        justifyContent: 'start',\n        height: '300px',\n    },\n    image: {\n        display: 'inline-block',\n        objectFit: 'cover',\n        aspectRatio: 'auto',\n        margin: \"0 1rem\",\n    },\n    imageButtonContainer: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        position: \"absolute\",\n        bottom: 0,\n        right: \"1rem\",\n        color: \"#FFF\"\n    },\n    icons: {\n        color: theme.palette.primary.dark,  \n    }\n}));\n  \n\nconst PROFILE_IMAGE = gql`\nquery {\n  repositoryOwner(login: \"redmarmaduke\") {\n    profileImageUrl: avatarUrl\n  }\n}\n`;\n\n\nconst PROFILE_DATA = {\n    gitHubUrl: \"https://github.com/redmarmaduke\",\n    linkedInUrl: \"https://www.linkedin.com/in/manuel-nunes-272ba31b/\",\n    whoAmI: \"Looking for roles in web Software Development/QA for Systems, Firmware, or Computer graphics.  I'm a computer graphics hobbyist and a graduate of CSU Chico and the UC Berkeley Coding Boot Camp.\"\n}\n\nexport default function Me(props) {\n    const classes = useStyles();\n\n    const { loading, error, data } = useQuery(PROFILE_IMAGE);\n    if (loading) {\n        return <p>Loading</p>;\n    }\n    if (error) {\n        console.log(error);\n        return <p>Error</p>;\n    }\n    if (!data) {\n        return <p>Not found!</p>;\n    }\n\n    let { repositoryOwner: { profileImageUrl: image } } = data;\n//[\"sticky-container\", props.className].join(\" \")\n    return (\n        <div className={classes.root}>\n            <div className={classes.imageContainer}>\n                <img src={image} className={classes.image} alt=\"biography\"/>\n                <div className={classes.imageButtonContainer}>\n                    <IconButton aria-label={`GitHub`} >\n                        <a href={PROFILE_DATA.gitHubUrl}><GitHubIcon className={classes.icons}/></a>\n                    </IconButton>\n                    <IconButton aria-label={`GitHub`} >\n                        <a href={PROFILE_DATA.linkedInUrl}><LinkedInIcon className={classes.icons}/></a>\n                    </IconButton>\n                </div>\n            </div>\n            <p style={{ float: \"clear\", textAlign: \"left\", fontSize: \"16px\", color: \"#000\" }}>{PROFILE_DATA.whoAmI}</p>\n        </div>\n    )\n}","import React, { useState } from 'react';\n\n/**\n * @constructor\n * @param {*} props \n * @returns \n */\nexport default function Image (props) {\n    const [ loaded, setLoaded ] = useState(false);\n    const [ error, setError ] = useState(false);\n    /**\n     * onError\n     * \n     * sets the src to undefined which will result in a rerender using a div\n     */\n    function onLoad() {\n        setLoaded(true);\n    }\n    function onError() {\n        setError(true);\n    }\n\n    const divStyle = {\n        backgroundColor: 'black',\n        color: 'white',\n        objectFit: 'cover',\n        width: '100%',\n        height: '100%',\n    };\n\n    /**\n     * if not loaded and no error then use test image\n     * else if not loaded and error then render empty div (or message)\n     * else re-render the img tag since we know that the src is valid\n     */\n    return !loaded ?\n        (!error ? (<><img src={props.src} onLoad={onLoad} onError={onError} alt={'pre-load'}/><div>Loading</div></>) : <div style={divStyle}></div>):\n        <img alt={props.alt || \"\"} {...props}/>;\n}","/**\n * Example code provided by material-ui.com\n */\nimport React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { GridList, GridListTile, GridListTileBar, IconButton } from '@material-ui/core';\nimport { GitHub as GitHubIcon } from '@material-ui/icons';\n\n/**\n * Apollo setup\n */\nimport { useQuery, gql } from '@apollo/client';\nimport parseUri from './parseUri';\n\n/**\n * Components\n */\nimport Image from '../Image';\n//import Image from 'mui-image';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    overflow: 'hidden',\n  },\n  gridList: {\n    width: 1280,\n\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)',\n  },\n  gridListTileRoot: {    \n      aspectRatio: \"2 / 1\",\n  },\n  gridListTileTile: {    \n    aspectRatio: \"2 / 1\", \n  },\n    //imgFullHeight: {},\n  gridListTileImgFullWidth: {\n      width: \"100%\",\n      aspectRatio: \"2 / 1\"\n  },\n  gridListTileImgFullHeight: {\n    height: \"100%\",\n    aspectRatio: \"2 / 1\"\n  },\n  title: {\n    color: theme.palette.primary.light,\n  },\n  titleBar: {\n    background:\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n  },\n}));\n\n\n// old REPOSITORIES graphQL query\n/*\nconst REPOSITORIES = gql`\nquery {\n  repositoryOwner(login: \"redmarmaduke\") {\n    profileImageUrl: avatarUrl,\n    repositories(first : 20, privacy: PUBLIC, ownerAffiliations: OWNER) {\n      nodes {\n        title: name\n        githubUrl: url\n        deployedUrl: homepageUrl\n        img: openGraphImageUrl\n      }\n    }\n  }\n}\n`;\n*/\n\nconst PINNED_REPOSITORIES = gql`\n  query {\n    user(login: \"redmarmaduke\") {\n      profileImageUrl: avatarUrl,\n      pinnedItems(first: 6, types: REPOSITORY) {\n        nodes {\n          ... on Repository {\n          title: name\n          githubUrl: url\n          deployedUrl: homepageUrl\n          img: openGraphImageUrl\n          }\n        }\n      }\n  }  \n  }\n`;\n\n/**\n * https://blog.hackages.io/conditionally-wrap-an-element-in-react-a8b9a47fab2\n * \n * @param { \n *          condition: boolean, \n *          wrapper: React.Component,\n *          children: React.Component[]|React.Component\n *        } \n * @returns children or wrapper containing the children\n */\nconst ConditionalWrapper = ({ condition, wrapper, children }) => {\n  return condition ? wrapper(children) : <>{children}</>;\n}\n\n/**\n * @constructor\n * @param {*} props \n */\nexport default function Projects(props) {\n  const classes = useStyles();\n  var { loading, error, data } = useQuery(PINNED_REPOSITORIES);\n\n  if (loading) {\n    return <p>Loading</p>;\n  }\n  if (error) {\n    console.log(error);\n    return <p>Error</p>;\n  }\n  if (!data) {\n    return <p>Not found!</p>;\n  }\n  {\n    let { user: { pinnedItems: { nodes: newData } } } = data;\n    data = newData;\n  }\n\n  var tiles = data.map(function (tile) {\n    let datum = { ...tile };\n    if (!tile.img || parseUri(tile.img).authority === \"avatars.githubusercontent.com\") {\n      datum.img = `https://via.placeholder.com/1280x640.webp/000000/FFFFFF?text=${tile.title}`;\n    }\n    return datum;\n  });\n\n  return (\n    <div className={classes.root}>\n      {/*cols={() => 2.5}*/}\n      <GridList className={classes.gridList} cellHeight='auto' cols={2} spacing={4}>\n        {tiles.map((tile, index) => (\n          <GridListTile classes={{\n            root: classes.gridListTileRoot,\n            tile: classes.gridListTileTile,\n            imgFullWidth: classes.gridListTileImgFullWidth,\n            imgFullHeight: classes.gridListTileImgFullHeight,\n          }} key={index} cols={index === 0 ? 2 : 1} rows={index === 0 ? 2 : 1}>\n            <ConditionalWrapper\n              condition={tile.deployedUrl}\n              wrapper={(children) => <a href={tile.deployedUrl}>{children}</a>}\n            >\n              <Image style={{ width: \"100%\", aspectRatio: \"2 / 1\" }} src={tile.img} alt={tile.title} />\n            \n            </ConditionalWrapper>\n            <GridListTileBar\n              title={tile.title}\n              classes={{\n                root: classes.titleBar,\n                title: classes.title,\n              }}\n              actionIcon={tile.githubUrl ?\n                <IconButton aria-label={`star ${tile.title}`}>\n                  <a href={tile.githubUrl}><GitHubIcon className={classes.title} /></a>\n                </IconButton> : <></>\n              }\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n}\n\n","/**\n * https://tools.ietf.org/html/rfc3986\n * \n * @param String str \n * @returns Object {\n *   scheme?\n *   authority?\n *   path?\n *   query?\n *   fragment?\n * }}\n */\nexport default function parseUri(str) {\n    let keys = [ '', '', 'scheme', '', 'authority', 'path', '', 'query', '', 'fragment'];\n    let m = (/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/.exec(str));\n    let q = {};\n    for (let i = 0; i < keys.length; ++i) {    \n        if (keys[i] && m[i]) {\n            q[keys[i]]= m[i];\n        }\n    }\n    return q;    \n}\n\n","import React from 'react';\nimport { ApolloProvider, ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport { CssBaseline, Typography } from '@material-ui/core';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nimport Header from './components/Header';\nimport Me from './components/Me';\nimport Projects from './components/Projects';\nimport './App.scss';\n\n/**\n * Use Apollo to connect to GitHub using GraphQL\n */\nconst token = process.env.REACT_APP_TOKEN || process.env.GITHUB_TOKEN || \"\";\nconst httpLink = createHttpLink({\n  uri: \"https://api.github.com/graphql\",\n});\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  //const token = localStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\n/**\n * Create a custom theme for the application\n */\nvar theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#617968\",\n    },\n    secondary: {\n      main: \"#6E526B\"\n    },\n    /*\n    background: {\n      default: \"#DDD\"\n    },\n    text: {\n      primary: \"#FFF\",\n      secondary: \"#000\"\n    }*/\n  },\n  typography: {\n    fontFamily: [\"'Permanent Marker'\", \"cursive\"].join(\",\"),\n  },\n\n});\n\ntheme.typography.body1 = {\n  fontSize: \"22px\",\n/*\n  [theme.breakpoints.up('xs')]: {\n    fontSize: 'clamp(10px,7vw,22px)'\n  }\n*/\n};\n\n//theme = responsiveFontSizes(theme);\n\nlet style = {\n  section: {\n    padding: \"0px 24px\",\n  },\n  sectionHeader: {\n    marginTop: 0,\n    marginBottom: 0,\n    textAlign: \"left\",\n  },\n  sectionBody: {\n    marginLeft: 50\n  }\n}\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <div className=\"App\">\n          <Header color=\"primary\"/>\n          <div style={style.section}>\n            <div id=\"projects\" style={style.sectionHeader}>\n              <Typography variant=\"body1\">\n                Projects\n              </Typography>\n            </div>\n            <Projects style={style.sectionBody}/>\n          </div>\n          <div style={style.section} >\n            <div id=\"me\" style={style.sectionHeader}>\n              <Typography variant=\"body1\">\n                About Me\n              </Typography>\n            </div>\n            <Me style={style.sectionBody}/>\n          </div>\n          \n        </div>\n      </MuiThemeProvider>\n    </ApolloProvider >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}